template:
  - sensor:
      - name: yatak_thermostat
        unique_id: yatak_thermostat
        unit_of_measurement: "Â°C"
        state: "{{ state_attr('climate.yatak_climate', 'current_temperature') }}"
        availability: "{{ states('climate.yatak_climate') != 'unavailable' }}"
        device_class: temperature

input_number:
  yatak_thermostat:
    name: yatak_thermostat
    initial: 0
    min: 0
    max: 100
    step: 1

automation:
  - alias: "yatak_thermostat_pidvalue"
    id: "yatak_thermostat_pidvalue"
    triggers:
      - trigger: state
        entity_id: input_number.yatak_thermostat
    conditions: []
    actions:
      - action: number.set_value
        target:
          entity_id: number.yatak_climate_valve_opening_degree
        data:
          value: "{{ trigger.to_state.state | int }}"
      - action: number.set_value
        target:
          entity_id: number.yatak_climate_valve_closing_degree
        data:
          value: "{{ 100 - (trigger.to_state.state | int) }}"
    mode: single
  - alias: "yatak_thermostat_state"
    id: "yatak_thermostat_state"
    triggers:
      - trigger: state
        entity_id: climate.yatak_thermostat
        to: heat
        id: thermostat
      - trigger: state
        entity_id: climate.yatak_thermostat
        to: "off"
        id: thermostat
      - trigger: state
        entity_id: climate.yatak_climate
        to: heat
        id: climate
      - trigger: state
        entity_id: climate.yatak_climate
        to: "off"
        id: climate
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: thermostat
            sequence:
              - action: climate.set_hvac_mode
                metadata: {}
                target:
                  entity_id: "climate.yatak_climate"
                data:
                  hvac_mode: "{{states('climate.yatak_thermostat')}}"
          - conditions:
              - condition: trigger
                id: climate
            sequence:
              - action: climate.set_hvac_mode
                metadata: {}
                target:
                  entity_id: "climate.yatak_thermostat"
                data:
                  hvac_mode: "{{states('climate.yatak_climate')}}"
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 0
    mode: single
  - alias: "yatak_thermostat_temperature"
    id: "yatak_thermostat_temperature"
    triggers:
      - trigger: state
        entity_id: climate.yatak_thermostat
        attribute: temperature
        id: thermostat
      - trigger: state
        entity_id: climate.yatak_climate
        attribute: temperature
        id: climate
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: thermostat
            sequence:
              - action: climate.set_temperature
                metadata: {}
                target:
                  entity_id: "climate.yatak_climate"
                data:
                  temperature: "{{state_attr('climate.yatak_thermostat', 'temperature') | float(0)}}"
          - conditions:
              - condition: trigger
                id: climate
            sequence:
              - action: climate.set_temperature
                metadata: {}
                target:
                  entity_id: "climate.yatak_thermostat"
                data:
                  temperature: "{{state_attr('climate.yatak_climate', 'temperature') | float(0)}}"
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 0
    mode: single

climate:
  - platform: smart_thermostat
    name: yatak_thermostat
    unique_id: yatak_thermostat
    heater: input_number.yatak_thermostat
    target_sensor: sensor.yatak_thermostat
    target_temp: 19
    keep_alive:
      seconds: 60
    kp: 20
    ki: 0.015
    kd: 10
    min_cycle_duration: 10
    pwm: 0
    min_temp: 4
    max_temp: 35

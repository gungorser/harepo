automation:
  - id: schedule_automation
    alias: schedule_automation
    description: ""
    triggers:
      - trigger: sun
        event: sunset
        offset: 0
        id: sunset
      - trigger: sun
        event: sunrise
        offset: 0
        id: sunrise
      - trigger: calendar
        entity_id: calendar.sercan
        event: start
        offset: "-0:30:0"
        id: event_start
      - trigger: calendar
        entity_id: calendar.melike
        event: start
        offset: "-0:30:0"
        id: event_start
      - trigger: calendar
        entity_id: calendar.sercan
        event: end
        offset: "0:0:0"
        id: sercan_event_end
      - trigger: calendar
        entity_id: calendar.melike
        event: end
        offset: "-0:0:0"
        id: melike_event_end
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - event_start
            sequence:
              - action: climate.set_hvac_mode
                metadata: {}
                data:
                  hvac_mode: heat
                target:
                  area_id: "{{ trigger.calendar_event.summary }}"
          - conditions:
              - condition: trigger
                id:
                  - sercan_event_end
                  - melike_event_end
            sequence:
              - action: climate.set_hvac_mode
                metadata: {}
                data:
                  hvac_mode: "off"
                target:
                  area_id: "{{ trigger.calendar_event.summary }}"
              - action: calendar.get_events
                target:
                  entity_id: "{{ 'calendar.sercan' if trigger.id == 'sercan_event_end' else 'calendar.melike' }}"
                data:
                  start_date_time: "{{  as_datetime(state_attr('sun.sun', 'next_rising')) - timedelta(days=1) }}"
                  duration:
                    hours: 0
                    minutes: 0
                    seconds: 1
                  response_variable: active_event_during_sunrise
              - if:
                  - condition: template
                    value_template: >-
                      {% set sunrise_event = active_event_during_sunrise.values() | map(attribute='events') | list | first %}
                      {% set is_subset = true %}
                      {% for key in sunrise_event %}
                        {% if trigger.calendar_event[key] != sunrise_event[k] %}
                          {% set is_subset = false %}
                        {% endif %}
                      {% endfor %}
                      {{ is_subset }}
                then:
                  - action: cover.open_cover
                    metadata: {}
                    data: {}
                    target:
                      area_id: "{{trigger.calendar_event.summary }}"
                  - wait_template: >-
                      {{ trigger.calendar_event.summary
                            | select('match','cover.*') 
                            | map('state_attr', 'current_position')
                            | reject('eq', 100) | list }}
          - conditions:
              - condition: trigger
                id:
                  - sunset
            sequence:
              - action: cover.close_cover
                metadata: {}
                data: {}
                target: "{{ { 'area_id': areas() | list } }}"
          - conditions:
              - condition: trigger
                id:
                  - sunrise
            sequence:
              - action: calendar.get_events
                target:
                  entity_id:
                    - calendar.sercan
                    - calendar.melike
                data:
                  start_date_time: "{{ now() }}"
                  duration:
                    hours: 0
                    minutes: 0
                    seconds: 1
                  response_variable: active_events
              - action: cover.open_cover
                metadata: {}
                data: {}
                target: >-
                  {{ {'area_id':  areas()   
                      | reject('in', active_events.values() 
                      | map(attribute='events')
                      | sum(start=[])
                      | map(attribute='summary')
                      | unique ) | list } }}
    mode: queued

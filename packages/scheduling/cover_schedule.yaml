automation:
  - id: cover_schedule
    alias: cover_schedule
    description: ""
    triggers:
      - trigger: sun
        event: sunset
        offset: 0
        id: sunset
      - trigger: sun
        event: sunrise
        offset: 0
        id: sunrise
      - trigger: calendar
        entity_id: calendar.sercan
        event: end
        offset: "0:0:0"
        id: event_end
        variables:
          calendar_id: calendar.sercan
      - trigger: calendar
        entity_id: calendar.melike
        event: end
        offset: "-0:0:0"
        id: event_end
        variables:
          calendar_id: calendar.melike
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - event_end
            sequence:
              - action: calendar.get_events
                target:
                  entity_id: >-
                    {{ ['calendar.sercan', 'calendar.melike'] | reject(calendar_id) | list }}
                data:
                  start_date_time: "{{ now() }}"
                  duration:
                    hours: 0
                    minutes: 0
                    seconds: 1
                response_variable: active_events_from_others
              - if:
                  - condition: template
                    value_template: >-
                      {{ active_events_from_others.values() 
                          | map(attribute='events')
                          | sum(start=[])
                          | map(attribute='description')
                          | map('area_id')
                          | select(area_id(trigger.calendar_event.description))
                          | list | count == 0 }}
                then:
                  - action: calendar.get_events
                    target:
                      entity_id: "{{ calendar_id }}"
                    data:
                      start_date_time: "{{  as_datetime(state_attr('sun.sun', 'next_rising')) - timedelta(days=1) }}"
                      duration:
                        hours: 0
                        minutes: 0
                        seconds: 1
                    response_variable: active_event_during_sunrise
                  - if:
                      - condition: template
                        value_template: >-
                          {% set sunrise_event = active_event_during_sunrise.values() | map(attribute='events') | list | first %}
                          {% set is_subset = true %}
                          {% for key in sunrise_event %}
                            {% if trigger.calendar_event[key] != sunrise_event[k] %}
                              {% set is_subset = false %}
                            {% endif %}
                          {% endfor %}
                          {{ is_subset }}
                    then:
                      - action: cover.open_cover
                        metadata: {}
                        data: {}
                        target:
                          area_id: "{{area_id(trigger.calendar_event.description) }}"
                      - delay: 120
          - conditions:
              - condition: trigger
                id:
                  - sunset
            sequence:
              - action: cover.close_cover
                metadata: {}
                data: {}
                target: "{{ { 'area_id': areas() | list } }}"
          - conditions:
              - condition: trigger
                id:
                  - sunrise
            sequence:
              - action: calendar.get_events
                target:
                  entity_id:
                    - calendar.sercan
                    - calendar.melike
                data:
                  start_date_time: "{{ now() }}"
                  duration:
                    hours: 0
                    minutes: 0
                    seconds: 1
                response_variable: active_events
              - action: cover.open_cover
                metadata: {}
                data: {}
                target: >-
                  {{ {'area_id':  areas()   
                      | reject('in', active_events.values() 
                      | map(attribute='events')
                      | sum(start=[])
                      | map(attribute='description')
                      | map('area_id')
                      | unique | list) | list } }}
    mode: queued

automation:
  - id: climate_schedule
    alias: climate_schedule
    description: ""
    triggers:
      - trigger: calendar
        entity_id: calendar.sercan
        event: start
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.sercan
        event: start
        offset: "+0:30:0"
      - trigger: calendar
        entity_id: calendar.sercan
        event: end
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.sercan
        event: end
        offset: "-0:30:0"
      - trigger: calendar
        entity_id: calendar.melike
        event: start
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.melike
        event: start
        offset: "+0:30:0"
      - trigger: calendar
        entity_id: calendar.melike
        event: end
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.melike
        event: end
        offset: "-0:30:0"
      - trigger: calendar
        entity_id: calendar.misafir
        event: start
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.misafir
        event: start
        offset: "+0:30:0"
      - trigger: calendar
        entity_id: calendar.misafir
        event: end
        offset: "0:0:0"
      - trigger: calendar
        entity_id: calendar.misafir
        event: end
        offset: "-0:30:0"
    conditions: []
    actions:
      - variables:
          event_time: >-
            {% if trigger.event == 'start' %}
              {% set start_no_offset = trigger.calendar_event.start %}
            {% else %}
              {% set start_no_offset = trigger.calendar_event.end %}
            {% endif %}
            {{ as_local(as_datetime(start_no_offset)) + trigger.offset }}
      - action: calendar.get_events
        target:
          entity_id: >-
            {{ states.calendar | map(attribute='entity_id') | list }}
        data:
          start_date_time: "{{ event_time }}"
          duration:
            hours: 0
            minutes: 0
            seconds: 1
        response_variable: after_events
      - action: calendar.get_events
        target:
          entity_id: >-
            {{ states.calendar | map(attribute='entity_id') | list }}
        data:
          start_date_time: "{{ (as_timestamp(event_time)-1) | timestamp_local }}"
          duration:
            hours: 0
            minutes: 0
            seconds: 1
        response_variable: before_events
      - variables:
          room_id: >
            {{ area_id((trigger.calendar_event.description | from_json)['room_name']) }}
          room_temps: >
            {% set ns = namespace(temps_all=[]) %} 
            {% for events in [before_events, after_events] %}
              {% set ns2 = namespace(temps=[]) %} 
              {% set all_events = events.values() | map(attribute='events') | sum(start=[]) | list %}
              {% for event in all_events %}
                {% set desc = event.description | from_json %}
                {% if area_id(desc['room_name']) == room_id %}
                  {% if 'sleep_temp' in desc 
                      and as_timestamp(event.start) + timedelta(seconds=1800) <= as_timestamp(event_time) 
                      and as_timestamp(event.end) - timedelta(seconds=1800) > as_timestamp(event_time) %}
                    {% set ns2.temps = ns2.temps + [ desc['sleep_temp'] ] %}
                  {% elif   as_timestamp(event.start) <= as_timestamp(event_time) 
                      and as_timestamp(event.end) > as_timestamp(event_time) %}
                    {% set ns2.temps = ns2.temps + [desc['temp']] %}    
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% set ns.temps_all = ns.temps_all + [ ns2.temps ] %}
              {% set ns2.temps = [] %}
            {% endfor %} 
            {{ ns.temps_all }}
      - if: >
          {% set before = none if room_temps[0] else room_temps[0] | max %}
          {% set after = none if room_temps[1] else room_temps[1] | max %}
          {{ before != after }}
        then:
          - action: climate.set_temperature
            data:
              temperature: "{{ after | int(0) }}"
              hvac_mode: "{{ 'heat' if after else 'off' }}"
            target:
              area_id: "{{ room_id }}"
    mode: queued

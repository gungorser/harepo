blueprint:
  name: Thermostat Automation
  description: Automation of thermostat
  domain: automation
  input:
    pidvalue:
      name: PID Value
      description: PID value of the virtual thermostat
      default: []
      selector:
        entity:
          domain: input_number
          multiple: true

    valve_opening:
      name: Valve Value Opening
      description: physical state of sonoff trv valve
      default: []
      selector:
        entity:
          domain: number
          multiple: true
    valve_closing:
      name: Valve Value Closing
      description: physical state of sonoff trv valve
      default: []
      selector:
        entity:
          domain: number
          multiple: true
    valve_min:
      name: Valve min opening percentage
      default: 0
      selector:
        min: 0
        max: 100
        step: 1
        mode: box
    valve:
      name: Climate entity
      description: physical climate entity
      selector:
        entity:
          domain: climate
    thermostat:
      name: thermostat
      description: Virtual thermostat entity
      selector:
        entity:
          domain: climate
alias: Thermostat automation
description: ""
trigger:
  - platform: state
    entity_id: !input pidvalue
    id: pidchange
  - platform: state
    entity_id: !input valve
    id: state_sync_physical
  - platform: state
    entity_id: !input thermostat
    id: state_sync_automation
  - platform: state
    entity_id: !input valve
    id: attr_sync_physical
    attribute: temperature
  - platform: state
    entity_id: !input thermostat
    id: attr_sync_automation
    attribute: temperature
condition: []
action:
  - choose:
      - conditions:
          - condition: trigger
            id: pidchange
        sequence:
          - variables:
              scaled_value: >
                {% set min = !input valve_ min %}
                {% set scale = (100 - min) / 100 %}
                {{ min + (trigger.to_state.state | int * scale) }}
          - action: number.set_value
            target:
              entity_id: !input valve_opening
            data:
              value: "{{ scaled_value | int }}"
          - action: number.set_value
            target:
              entity_id: !input valve_closing
            data:
              value: "{{ 100 - scaled_value | int }}"
      - conditions:
          - condition: trigger
            id: state_sync_automation
        sequence:
          - if: "{{ trigger.to_state.context.user_id is not none }}"
            then:
              - action: climate.set_hvac_mode
                metadata: {}
                target:
                  entity_id: !input valve
                data:
                  hvac_mode: >
                    {% set state = states(trigger.entity_id) %}
                    {{ "off" if state == "unknown" else state }}
          - if: "{{ trigger.to_state.state == 'heat' }}"
            then: 
              - action: smart_thermostat.clear_integral
                target:
                  entity_id: !input thermostat
                data: {}
      - conditions:
          - condition: trigger
            id: state_sync_physical
          - condition: template
            value_template: >
              {{ trigger.to_state.context.user_id is none }}
        sequence:
          - action: climate.set_hvac_mode
            metadata: {}
            target:
              entity_id: !input thermostat
            data:
              hvac_mode: "{{states(trigger.entity_id)}}"
      - conditions:
          - condition: trigger
            id: attr_sync_automation
          - condition: template
            value_template: >
              {{ trigger.to_state.context.user_id is not none }}
        sequence:
          - action: climate.set_temperature
            metadata: {}
            target:
              entity_id: !input valve
            data:
              temperature: "{{state_attr(trigger.entity_id, 'temperature') | float(0) }}"
      - conditions:
          - condition: trigger
            id: attr_sync_physical
          - condition: template
            value_template: >
              {{ trigger.to_state.context.user_id is none }}
        sequence:
          - action: climate.set_temperature
            metadata: {}
            target:
              entity_id: !input thermostat
            data:
              temperature: "{{state_attr(trigger.entity_id, 'temperature') | float(0) }}"
mode: queued
